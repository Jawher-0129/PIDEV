security:
    enable_authenticator_manager: true
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User1
                property: Email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            guard:
                authenticators:
                    - 'App\Security\GoogleAuthenticator'
            pattern: ^/
            form_login:
                login_path: 'app_login'
                check_path: 'app_login'
            logout:
                path: app_logout
                target: app_login
                success_handler: App\Security\CustomLogoutSuccessHandler

            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginAuthenticator
            entry_point: 'form_login'

        admin_area:
            pattern: ^/admin
            form_login:
                login_path: 'admin_login'
                check_path: 'admin_login'
            logout:
                path: admin_logout
                target: admin_login  # Update the logout target for admin area
                success_handler: App\Security\CustomLogoutSuccessHandler
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\LoginAuthenticator
            entry_point: 'form_login'

    access_control:
        - { path: ^/home, roles: ROLE_USER }
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/admin/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/login, roles: '!ROLE_ADMIN' }
        - { path: ^/register, roles: '!ROLE_ADMIN' }

        # Ajoutez ici la configuration pour l'accès à "/home"
        - { path: ^/home, roles: ROLE_USER }

        # Assurez-vous que le chemin vers "/home" est protégé par le rôle ROLE_USER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon